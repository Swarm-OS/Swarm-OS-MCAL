/**
 * @file stm32f411_TimerIf.ch
 * @author Christoph Lehr
 * @date 2 June 2020
 * @brief additional defintions for STM32F4 Timer Interface
 *
 * This file adds additional definitions for the STM32F4
 * Timer Interface 
 */

#ifndef STM32F4xx_TIMERIF_H
#define STM32F4xx_TIMERIF_H

#include <datatypes.h>
#include <stddef.h>
#include <mcus.h>
#include "stm32f4xx.h"


#if IS_MCU(STM32F411)
#   define MAX_TIMER_ID 11
#else if IS_MCU(STM32F407)
#   define MAX_TIMER_ID 14
#endif

volatile STM32F4xx_TIM_CR1_Regdef_t *cr1_regs[MAX_TIMER_ID+1] = 
{
    NULL,
    &STM32F4XX_TIM1_REG-> TIM_CR1,
    &STM32F4XX_TIM2_REG-> TIM_CR1,
    &STM32F4XX_TIM3_REG-> TIM_CR1,
    &STM32F4XX_TIM4_REG-> TIM_CR1,
    &STM32F4XX_TIM5_REG-> TIM_CR1, 
    &STM32F4XX_TIM6_REG-> TIM_CR1, 
    &STM32F4XX_TIM7_REG-> TIM_CR1,
    &STM32F4XX_TIM8_REG-> TIM_CR1,
    &STM32F4XX_TIM9_REG-> TIM_CR1,
    &STM32F4XX_TIM10_REG->TIM_CR1,
    &STM32F4XX_TIM11_REG->TIM_CR1,
#if MAX_TIMER> 11
    &STM32F4XX_TIM12_REG->TIM_CR1,
    &STM32F4XX_TIM13_REG->TIM_CR1,
    &STM32F4XX_TIM14_REG->TIM_CR1,
#endif
};

volatile STM32F4xx_TIM_CCMR1_Regdef_t *ccmr1_regs[MAX_TIMER_ID+15] = 
{
    NULL,
    &STM32F4XX_TIM1_REG->TIM_CCMR1,
    &STM32F4XX_TIM2_REG->TIM_CCMR1,
    &STM32F4XX_TIM3_REG->TIM_CCMR1,
    &STM32F4XX_TIM4_REG->TIM_CCMR1,
    &STM32F4XX_TIM5_REG->TIM_CCMR1,
    NULL,
    NULL,
    &STM32F4XX_TIM8_REG->TIM_CCMR1,
    &STM32F4XX_TIM9_REG->TIM_CCMR1,
    &STM32F4XX_TIM10_REG->TIM_CCMR1,
    &STM32F4XX_TIM11_REG->TIM_CCMR1,
#if MAX_TIMER> 11
    &STM32F4XX_TIM12_REG->TIM_CCMR1,
    &STM32F4XX_TIM13_REG->TIM_CCMR1,
    &STM32F4XX_TIM14_REG->TIM_CCMR1,
#endif
};

volatile STM32F4xx_TIM_CCMR2_Regdef_t *ccmr2_regs[MAX_TIMER_ID+1] = 
{
    NULL,
    &STM32F4XX_TIM1_REG->TIM_CCMR2,
    &STM32F4XX_TIM2_REG->TIM_CCMR2,
    &STM32F4XX_TIM3_REG->TIM_CCMR2,
    &STM32F4XX_TIM4_REG->TIM_CCMR2,
    &STM32F4XX_TIM5_REG->TIM_CCMR2,
    NULL,
    NULL,
    &STM32F4XX_TIM8_REG->TIM_CCMR2,
    NULL,
    NULL,
    NULL,
#if MAX_TIMER> 11
    NULL,
    NULL,
    NULL,
#endif
};

volatile STM32F4xx_TIM_CCER_Regdef_t *ccer_regs[MAX_TIMER_ID+1] = 
{
    NULL,
    &STM32F4XX_TIM1_REG->TIM_CCER,
    &STM32F4XX_TIM2_REG->TIM_CCER,
    &STM32F4XX_TIM3_REG->TIM_CCER,
    &STM32F4XX_TIM4_REG->TIM_CCER,
    &STM32F4XX_TIM5_REG->TIM_CCER,
    NULL,
    NULL,
    &STM32F4XX_TIM8_REG->TIM_CCER,
    &STM32F4XX_TIM9_REG->TIM_CCER,
    &STM32F4XX_TIM10_REG->TIM_CCER,
    &STM32F4XX_TIM11_REG->TIM_CCER,
#if MAX_TIMER> 11
    &STM32F4XX_TIM12_REG->TIM_CCER,
    &STM32F4XX_TIM13_REG->TIM_CCER,
    &STM32F4XX_TIM14_REG->TIM_CCER,
#endif
};

volatile STM32F4xx_TIM_ARR_Regdef_t *arr_regs[MAX_TIMER_ID+1] = 
{
    NULL,
    &STM32F4XX_TIM1_REG->TIM_ARR,
    &STM32F4XX_TIM2_REG->TIM_ARR,
    &STM32F4XX_TIM3_REG->TIM_ARR,
    &STM32F4XX_TIM4_REG->TIM_ARR,
    &STM32F4XX_TIM5_REG->TIM_ARR, 
    &STM32F4XX_TIM6_REG->TIM_ARR, 
    &STM32F4XX_TIM7_REG->TIM_ARR,
    &STM32F4XX_TIM8_REG->TIM_ARR,
    &STM32F4XX_TIM9_REG->TIM_ARR,
    &STM32F4XX_TIM10_REG->TIM_ARR,
    &STM32F4XX_TIM11_REG->TIM_ARR,
#if MAX_TIMER> 11
    &STM32F4XX_TIM12_REG->TIM_ARR,
    &STM32F4XX_TIM13_REG->TIM_ARR,
    &STM32F4XX_TIM14_REG->TIM_ARR,
#endif
};

volatile STM32F4xx_TIM_PSC_Regdef_t *psc_regs[MAX_TIMER_ID+1] = 
{
    NULL,
    &STM32F4XX_TIM1_REG->TIM_PSC,
    &STM32F4XX_TIM2_REG->TIM_PSC,
    &STM32F4XX_TIM3_REG->TIM_PSC,
    &STM32F4XX_TIM4_REG->TIM_PSC,
    &STM32F4XX_TIM5_REG->TIM_PSC, 
    &STM32F4XX_TIM6_REG->TIM_PSC, 
    &STM32F4XX_TIM7_REG->TIM_PSC,
    &STM32F4XX_TIM8_REG->TIM_PSC,
    &STM32F4XX_TIM9_REG->TIM_PSC,
    &STM32F4XX_TIM10_REG->TIM_PSC,
    &STM32F4XX_TIM11_REG->TIM_PSC,
#if MAX_TIMER> 11
    &STM32F4XX_TIM12_REG->TIM_PSC,
    &STM32F4XX_TIM13_REG->TIM_PSC,
    &STM32F4XX_TIM14_REG->TIM_PSC,
#endif
};

volatile STM32F4xx_TIM_CCR_Regdef_t *ccr_regs[MAX_TIMER_ID+1][4] = 
{
    NULL,
    {&STM32F4XX_TIM1_REG->TIM_CCR1, &STM32F4XX_TIM1_REG->TIM_CCR2,&STM32F4XX_TIM1_REG->TIM_CCR3,&STM32F4XX_TIM1_REG->TIM_CCR4  },
    {&STM32F4XX_TIM2_REG->TIM_CCR1, &STM32F4XX_TIM2_REG->TIM_CCR2,&STM32F4XX_TIM2_REG->TIM_CCR3,&STM32F4XX_TIM2_REG->TIM_CCR4  },
    {&STM32F4XX_TIM3_REG->TIM_CCR1, &STM32F4XX_TIM3_REG->TIM_CCR2,&STM32F4XX_TIM3_REG->TIM_CCR3,&STM32F4XX_TIM3_REG->TIM_CCR4  },
    {&STM32F4XX_TIM4_REG->TIM_CCR1, &STM32F4XX_TIM4_REG->TIM_CCR2,&STM32F4XX_TIM4_REG->TIM_CCR3,&STM32F4XX_TIM4_REG->TIM_CCR4  },
    {&STM32F4XX_TIM5_REG->TIM_CCR1, &STM32F4XX_TIM5_REG->TIM_CCR2,&STM32F4XX_TIM5_REG->TIM_CCR3,&STM32F4XX_TIM5_REG->TIM_CCR4  }, 
    {NULL, NULL, NULL, NULL }, 
    {NULL, NULL, NULL, NULL },
    {&STM32F4XX_TIM8_REG-> TIM_CCR1, &STM32F4XX_TIM8_REG-> TIM_CCR2, &STM32F4XX_TIM8_REG-> TIM_CCR3, &STM32F4XX_TIM8_REG-> TIM_CCR4},
    {&STM32F4XX_TIM9_REG-> TIM_CCR1, &STM32F4XX_TIM9_REG-> TIM_CCR2, NULL, NULL},
    {&STM32F4XX_TIM10_REG->TIM_CCR1, NULL, NULL, NULL},
    {&STM32F4XX_TIM11_REG->TIM_CCR1, NULL, NULL, NULL},
#if MAX_TIMER> 11
    {&STM32F4XX_TIM12_REG->TIM_CCR1, &STM32F4XX_TIM12_REG->TIM_CCR2, NULL, NULL},
    {&STM32F4XX_TIM13_REG->TIM_CCR1, NULL, NULL, NULL},
    {&STM32F4XX_TIM14_REG->TIM_CCR1, NULL, NULL, NULL},
#endif
};

#endif